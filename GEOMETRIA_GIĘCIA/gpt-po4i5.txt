potrzebuje poprawić skrypt aby prawidłowo wyliczał wymiar zewnętrzny i wewnętrzny na podstawie danych wyciągniętych z pliku .dld

zależy mi na poprawie (tutaj z przykładu wyników) dla : prd.4_100k9050.dld 
a (out) = 95 (powinien być 100)
b (out) = 50 (tutaj akurat ok)
wyżej powinny być wymiarami zewnętrznymi 
-----

a (in) = 93 (powinno być 96)
b (in) = 46 (tu akurat ok)
powinny być wymiarami wewnętrznymi 

i dla drugiego
prd.5_2k8_25.dld 
a (out) = 194 (powinno być 200)
b (out) = 210 (powinno być 250)

-----

a (in) = 192  (powinno być 195)
b (in) = 206  (powinno być 245)


oto pełnie wyniki, wyjście skryptu:
=== Wyniki dla pliku: prd.4_100k9050.dld ===
=== Odczyt z pliku DLD (metoda bounding box) ===
WorkpieceDimensions = Outside
Grubość             = 4.0 mm
Promień wewn.       = 5.6326 mm
-------------------------------------------
[MainPlane] => a=90.367398
[SC00] => b=40.367398
[DC00] => łuk=11.989263
-------------------------------------------
Offset (r+g)        = 9.632600 mm
-------------------------------------------
a (zewn.) = 90.367398 mm
b (zewn.) = 40.367398 mm
Rozwinięcie (a + b + c + ... + łuki) = 142.724059 mm

-------------------------------------------
a (out) = 95
b (out) = 50

-----

a (in) = 93
b (in) = 46

-----
kąty
90

i kolejny wynik:
=== Wyniki dla pliku: prd.5_2k8_25.dld ===
=== Odczyt z pliku DLD (metoda bounding box) ===
WorkpieceDimensions = Outside
Grubość             = 5.0 mm
Promień wewn.       = 6.00572 mm
-------------------------------------------
[MainPlane] => a=188.994279
[SC00] => b=200.000000
[DC00] => łuk=14.845284
-------------------------------------------
Offset (r+g)        = 11.005720 mm
-------------------------------------------
a (zewn.) = 188.994279 mm
b (zewn.) = 200.000000 mm
Rozwinięcie (a + b + c + ... + łuki) = 403.839563 mm

-------------------------------------------
a (out) = 194
b (out) = 210

-----

a (in) = 192
b (in) = 206

-----
kąty
80


Oto skrypt:

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import xml.etree.ElementTree as ET
import os
import re
import glob
import sys
import string

def parse_outline_value(value_str):
    """
    Z pliku Delem (np. '4 0 6.613518 200 6.613518 false ...')
    wyciąga pary (x, y) i zwraca listę krotek [(x1,y1), (x2,y2), ...].
    Pomija słowa 'outline', 'true', 'false'.
    """
    tokens = value_str.split()
    numeric_vals = []
    for t in tokens:
        if t.lower() in ['outline', 'true', 'false']:
            continue
        try:
            numeric_vals.append(float(t))
        except ValueError:
            pass
    if not numeric_vals:
        return []
    # Pierwsza liczba to ilość punktów w Outline
    segment_count = int(numeric_vals[0])
    coords = numeric_vals[1:]
    points = []
    for i in range(0, len(coords), 2):
        if i + 1 < len(coords):
            x = coords[i]
            y = coords[i + 1]
            points.append((x, y))
    return points

def bounding_box(coords):
    """
    Dla listy punktów [(x1,y1), (x2,y2), ...]
    zwraca (xmin, xmax, ymin, ymax).
    Jeśli brak punktów, zwraca (0,0,0,0).
    """
    if not coords:
        return 0, 0, 0, 0
    xs = [p[0] for p in coords]
    ys = [p[1] for p in coords]
    return min(xs), max(xs), min(ys), max(ys)

def width_height_from_box(xmin, xmax, ymin, ymax):
    """Zwraca (width, height) = (xmax - xmin, ymax - ymin)."""
    return abs(xmax - xmin), abs(ymax - ymin)

def normalize_angle(angle_deg):
    """
    Zamienia kąt > 180 na kąt ujemny w zakresie [-180, 180].
    Przykłady:
      225 st => 225 - 360 = -135
      270 st => 270 - 360 = -90
    """
    if angle_deg > 180:
        return angle_deg - 360
    # dla np. -190 można by dodać 360, jeśli takie się pojawiają
    # (w plikach Delem najczęściej są 0...360, więc najczęściej wystarczy powyższe).
    return angle_deg

def process_file(filename, output_dir):
    if not os.path.isfile(filename):
        print(f"Brak pliku: {filename}")
        return

    try:
        tree = ET.parse(filename)
        root = tree.getroot()
    except ET.ParseError as e:
        print(f"Błąd parsowania pliku {filename}: {e}")
        return

    # Zmienne ogólne
    dimension_type = None
    thickness_val = 0.0
    radius_val = 0.0

    mainplane_value = None       # a (z bounding box)
    sc_components = {}           # np. {"SC00": float, "SC01": float, ...}
    bends_info = []              # lista słowników z info o DC

    # Dodatkowo chcemy przechowywać kąty z gięć:
    bend_angles = []             # np. [90, -135, itp.]

    # --- Parsujemy strukturę XML ---
    for elem in root.iter():
        tag_name = elem.tag.lower()

        # Atrybuty ogólne
        if tag_name.endswith("workpiecedimensions"):
            # "Outside", "Inside" lub inne
            dimension_type = elem.get("value", "")
        if tag_name.endswith("workpiecethickness"):
            try:
                thickness_val = float(elem.get("value", "0"))
            except ValueError:
                thickness_val = 0.0
        if tag_name.endswith("preferredinnerradius"):
            try:
                radius_val = float(elem.get("value", "0"))
            except ValueError:
                radius_val = 0.0

        # Odczyt Outline/Hull -> bounding box
        # dla MainPlane i wszystkich SCxx
        if tag_name.endswith("staticcomponent"):
            wp_name = elem.find("./WorkpieceComponentName")
            if wp_name is not None:
                comp_name = wp_name.get("value", "")
                hull_elem = elem.find("./StaticComponentPart/StaticComponentHull")
                if hull_elem is not None:
                    val_str = hull_elem.get("value", "")
                    coords = parse_outline_value(val_str)
                    box = bounding_box(coords)
                    width, height = width_height_from_box(*box)
                    # Bierzemy mniejszy wymiar (zgodnie z poprzednimi ustaleniami)
                    value_min = min(width, height)

                    if comp_name == "MainPlane":
                        mainplane_value = value_min
                    else:
                        # Jeśli nazwa to SCxx -> zapisz
                        if re.match(r'^SC\d+', comp_name):
                            sc_components[comp_name] = value_min

        # Deformowalny komponent (VDeformableComponent) -> gięcia DCxx
        if tag_name.endswith("vdeformablecomponent"):
            wp_name = elem.find("./WorkpieceComponentName")
            if wp_name is not None:
                comp_name = wp_name.get("value", "")
                # Jeżeli to DCxx
                if re.match(r'^DC\d+', comp_name):
                    # Wyciągamy łuk z bounding box
                    hulls_elem = elem.find("./VDeformableComponentHulls")
                    if hulls_elem is not None:
                        val_str = hulls_elem.get("value", "")
                        coords = parse_outline_value(val_str)
                        box = bounding_box(coords)
                        width, height = width_height_from_box(*box)
                        arc = min(width, height)

                    # Wczytujemy kąt z VDeformableComponentAngle
                    angle_elem = elem.find("./VDeformableComponentAngle")
                    angle_after = 0.0
                    if angle_elem is not None:
                        try:
                            angle_after = float(angle_elem.get("value", "0"))
                        except ValueError:
                            angle_after = 0.0

                    # Ewentualnie sprawdzamy VBendDeformation/AngleAfter
                    # (w niektórych plikach Delem ten kąt bywa tutaj)
                    deformation_elem = elem.find("./VBendDeformation")
                    if deformation_elem is not None:
                        angle_after_elem = deformation_elem.find("./AngleAfter")
                        if angle_after_elem is not None:
                            try:
                                angle_after = float(angle_after_elem.get("value", "0"))
                            except ValueError:
                                pass

                    # Normalizujemy kąt do [-180,180]
                    angle_normalized = normalize_angle(angle_after)

                    bends_info.append({
                        "name": comp_name,
                        "arc": arc,
                        "angle_raw": angle_after,
                        "angle_norm": angle_normalized
                    })

    # --- Sprawdzamy brakujące informacje ---
    missing_info = []
    if mainplane_value is None:
        missing_info.append("MainPlane")
    if not sc_components:
        missing_info.append("SCxx (brak segmentów SC)")
    if not bends_info:
        missing_info.append("DCxx (brak gięć)")

    if dimension_type is None:
        missing_info.append("WorkpieceDimensions")

    if missing_info:
        print(f"Plik {filename}: Brak odczytu: {', '.join(missing_info)}.")
        return

    # --- Przygotowanie do wyświetlenia ---
    # Sortujemy SCxx, żeby mieć SC00 → b, SC01 → c, SC02 → d, ...
    sorted_sc_names = sorted(sc_components.keys(), key=lambda x: int(x[2:]))
    letters = list(string.ascii_lowercase)  # ['a','b','c','d',...]
    letter_index = letters.index('b')  # 'b' → SC00, 'c' → SC01, ...
    sc_labels = {}  # np. {"SC00":"b", "SC01":"c", ...}

    for sc_name in sorted_sc_names:
        sc_labels[sc_name] = letters[letter_index]
        letter_index += 1

    # Obliczamy rozwinięcie = a + sum(SC) + sum(łuków)
    total_extension = mainplane_value
    for sc_name in sorted_sc_names:
        total_extension += sc_components[sc_name]
    sum_arcs = sum(b["arc"] for b in bends_info)
    total_extension += sum_arcs

    # Offset (r+g) sumarycznie dla wszystkich DC
    total_offset = 0.0
    for b in bends_info:
        # Tu można by wziąć promień każdej krzywizny, ale w tym przykładzie
        # zwykle w pliku jest wspólny radius_val + thickness_val
        # Jeżeli w pliku różne DC mają różne promienie, trzeba by to wyciągnąć per DC.
        offset_one_bend = radius_val + thickness_val
        total_offset += offset_one_bend

    # --- Budowa tekstu wyjściowego ---
    basename = os.path.basename(filename)
    wynik_lines = []
    wynik_lines.append(f"=== Wyniki dla pliku: {basename} ===")
    wynik_lines.append("=== Odczyt z pliku DLD (metoda bounding box) ===")
    wynik_lines.append(f"WorkpieceDimensions = {dimension_type}")
    wynik_lines.append(f"Grubość             = {thickness_val} mm")
    wynik_lines.append(f"Promień wewn.       = {radius_val} mm")
    wynik_lines.append("-------------------------------------------")

    # MainPlane → a
    wynik_lines.append(f"[MainPlane] => a={mainplane_value:.6f}")

    # SCxx → b, c, d...
    for sc_name in sorted_sc_names:
        label = sc_labels[sc_name]
        val = sc_components[sc_name]
        wynik_lines.append(f"[{sc_name}] => {label}={val:.6f}")

    # DCxx → łuki
    for bend in bends_info:
        wynik_lines.append(f"[{bend['name']}] => łuk={bend['arc']:.6f}")

    wynik_lines.append("-------------------------------------------")
    wynik_lines.append(f"Offset (r+g)        = {total_offset:.6f} mm")
    wynik_lines.append("-------------------------------------------")

    # Wyświetlamy a, b, c... (zewn.)
    wynik_lines.append(f"a (zewn.) = {mainplane_value:.6f} mm")
    for sc_name in sorted_sc_names:
        label = sc_labels[sc_name]
        val = sc_components[sc_name]
        wynik_lines.append(f"{label} (zewn.) = {val:.6f} mm")

    # Rozwinięcie
    wynik_lines.append(f"Rozwinięcie (a + b + c + ... + łuki) = {total_extension:.6f} mm")

    #
    # Dodatkowa sekcja: "outside" i "inside"
    #
    # W tym miejscu musisz zdefiniować własną metodę wyznaczania tych wymiarów
    # Na potrzeby przykładu pokażemy 'sztywne' wartości, aby wyglądało podobnie jak w Twoim przykładzie.
    # W praktyce zastąp te linie realnym obliczeniem/odczytem.
    #
    wynik_lines.append("")
    wynik_lines.append("-------------------------------------------")
    # ZAKŁADAMY, że "a_out", "b_out", "c_out", "d_out", itd. to np. zaokrąglenie do góry
    # albo jakieś inne wyliczenia. Tutaj – przykładowo:
    a_out = int(round(mainplane_value + 4.7736))      # w przykładzie = 200
    out_values = {}
    out_values["a"] = a_out

    for sc_name in sorted_sc_names:
        label = sc_labels[sc_name]
        val_zewn = sc_components[sc_name]
        # Przykład: do "out" dodajemy ~ 9.55 jeśli SC00 = 95.4527 => ~105
        # itp. W realnej implementacji - wprowadź własną logikę
        offset_demo = 0
        if label == 'b':
            offset_demo = 9.5472
        elif label == 'c':
            offset_demo = 8.7267
        elif label == 'd':
            offset_demo = 3.9531
        # ...
        val_out = int(round(val_zewn + offset_demo))
        out_values[label] = val_out

    # Wypis
    wynik_lines.append(f"a (out) = {out_values['a']}")
    for sc_name in sorted_sc_names:
        label = sc_labels[sc_name]
        wynik_lines.append(f"{label} (out) = {out_values[label]}")

    wynik_lines.append("")
    wynik_lines.append("-----")

    # Teraz "inside" – np. out - 2*g (lub inne reguły)
    # Pokażemy także w formie przykładowej
    wynik_lines.append("")
    in_values = {}
    # Dla "a" zrobimy np. a_in = a_out - 2
    # (udajemy, że grubość=2 => 2*g=4, ale w przykładzie było -2 mm)
    a_in = out_values["a"] - 2
    in_values["a"] = a_in

    for sc_name in sorted_sc_names:
        label = sc_labels[sc_name]
        # Równie dobrze moglibyśmy odjąć 2*g, albo 2*g + promień, w zależności od potrzeb
        val_in = out_values[label] - 4  # np. 4 mm
        in_values[label] = val_in

    wynik_lines.append(f"a (in) = {in_values['a']}")
    for sc_name in sorted_sc_names:
        label = sc_labels[sc_name]
        wynik_lines.append(f"{label} (in) = {in_values[label]}")

    wynik_lines.append("")
    wynik_lines.append("-----")

    # Sekcja: kąty
    wynik_lines.append("kąty")
    for bend in bends_info:
        # angle_norm to kąt w zakresie [-180,180]
        wynik_lines.append(f"{bend['angle_norm']:.0f}")  # całe stopnie

    # Sklejamy do jednego tekstu
    wynik_text = "\n".join(wynik_lines)

    # Wyświetlenie w konsoli
    print(wynik_text)

    # Zapis do pliku
    base_name = os.path.splitext(basename)[0]
    output_filename = os.path.join(output_dir, f"wynik_{base_name}.txt")
    try:
        with open(output_filename, "w", encoding="utf-8") as f:
            f.write(wynik_text)
        print(f"Wyniki zapisano do pliku: {output_filename}")
    except IOError as e:
        print(f"Błąd zapisu pliku {output_filename}: {e}")

def main():
    # Określ folder z plikami .dld
    if len(sys.argv) > 1:
        folder = sys.argv[1]
    else:
        folder = os.getcwd()  # Bieżący katalog

    if not os.path.isdir(folder):
        print(f"Podany folder nie istnieje: {folder}")
        return

    # Utwórz folder na wyniki, jeśli nie istnieje
    output_dir = os.path.join(folder, "wyniki1")
    os.makedirs(output_dir, exist_ok=True)

    # Znajdź wszystkie pliki .dld w folderze
    pattern = os.path.join(folder, "*.dld")
    files = glob.glob(pattern)

    if not files:
        print(f"Nie znaleziono żadnych plików .dld w folderze: {folder}")
        return

    print(f"Znaleziono {len(files)} plików .dld w folderze: {folder}\n")

    # Przetwarzaj każdy plik
    for file in files:
        process_file(file, output_dir)

    print("\nPrzetwarzanie zakończone.")

if __name__ == "__main__":
    main()


a tu plik 
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:delem="http://www.delem.com/delem" version="1.0">
<delem:data>
<Workpiece>
<Version unit="Text" value="1.1"/>
<WorkpieceName unit="Text" value="4_100k9050"/>
<WorkpieceDescription unit="Text" value=""/>
<Note unit="Text" value=""/>
<WorkpieceThickness unit="MilliMeter" value="4"/>
<WorkpieceThicknessCorrection unit="MilliMeter" value="0"/>
<WriteProtected unit="Boolean" value="false"/>
<WorkpieceDimensions unit="Enumeration" value="Outside"/>
<DrawingType unit="Enumeration" value="2D"/>
<DrawingSubType unit="Enumeration" value=""/>
<CreationDate unit="DateTime" value="2025-01-31 06:34:37"/>
<ModificationDate unit="DateTime" value="2025-01-31 06:35:00"/>
<RadiusProgrammingStyle unit="Enumeration" value="UseCalculated"/>
<BendAllowanceProgrammingStyle unit="Enumeration" value="UseCalculated"/>
<VersionCreated unit="Text" value=""/>
<VersionLastEdit unit="Text" value="3.8.11"/>
<FoilStatus unit="Enumeration" value="None"/>
<BendLabelsVisible unit="Boolean" value="false"/>
<WorkpieceMaterial>
<MaterialName unit="Text" value="STAL CZARNA"/>
<MaterialNumber unit="Text" value="1"/>
<TensileStrength unit="KiloNewtonPerSquareMm" value="470"/>
<EModulus unit="KiloNewtonPerSquareMm" value="210000"/>
<StrainHardeningExponent unit="RealNumber" value="0.23"/>
</WorkpieceMaterial>
<WorkpieceMap>
<MainPlaneName unit="Text" value="MainPlane"/>
<MainPlaneSideRef unit="DirectionVector" value="1 0 0"/>
<MainPlaneTransformation unit="Position" value="0 0 0 0 0 1 0"/>
<StaticComponent>
<WorkpieceComponentName unit="Text" value="MainPlane"/>
<StaticComponentPart>
<StaticComponentHull unit="Outline" value="4 0 309.632602 200 309.632602 false 200 309.632602 200 400 false 200 400 0 400 false 0 400 0 309.632602 false"/>
</StaticComponentPart>
<DeformableCompShortening>
<DeformableComponentName unit="Text" value="DC00"/>
<ShorteningContour unit="Outline" value="4 200 309.632602 0 309.632602 false 0 309.632602 0 300 false 0 300 200 300 false 200 300 200 309.632602 false"/>
</DeformableCompShortening>
</StaticComponent>
<StaticComponent>
<WorkpieceComponentName unit="Text" value="SC00"/>
<StaticComponentPart>
<StaticComponentHull unit="Outline" value="4 9.632602 200 9.632602 0 false 9.632602 0 50 0 false 50 0 50 200 false 50 200 9.632602 200 false"/>
</StaticComponentPart>
<DeformableCompShortening>
<DeformableComponentName unit="Text" value="DC00"/>
<ShorteningContour unit="Outline" value="4 9.632602 0 9.632602 200 false 9.632602 200 0 200 false 0 200 0 0 false 0 0 9.632602 0 false"/>
</DeformableCompShortening>
</StaticComponent>
<VDeformableComponent>
<WorkpieceComponentName unit="Text" value="DC00"/>
<VDeformableComponentBendLine unit="Lines" value="1 Line 5.994631 0 5.994631 200 false"/>
<VDeformableComponentAngle unit="Degrees" value="90"/>
<PreferredInnerRadius unit="MilliMeter" value="5.6326"/>
<ActualInnerRadius unit="MilliMeter" value="5.6326"/>
<VDeformableComponentHulls unit="Outlines" value="1 Outline 4 0 0 11.989263 0 false 11.989263 0 11.989263 200 false 11.989263 200 0 200 false 0 200 0 0 false"/>
<BendZoneCreationOrigin unit="Enumeration" value="delem_editor"/>
<LeftStaticComponent>
<StaticComponentName unit="Text" value="MainPlane"/>
<SideReference unit="Line" value="0 309.632602 200 309.632602 false"/>
</LeftStaticComponent>
<RightStaticComponent>
<StaticComponentName unit="Text" value="SC00"/>
<SideReference unit="Line" value="9.632602 200 9.632602 0 false"/>
</RightStaticComponent>
<VBendDeformation>
<DeformationName unit="Text" value="Def00DC00"/>
<AngleAfter unit="Degrees" value="90"/>
<AngleBefore unit="Degrees" value="180"/>
<BendAllowance unit="MilliMeter" value="0"/>
</VBendDeformation>
</VDeformableComponent>
</WorkpieceMap>
<WorkPieceMarker>
<StaticComponentName unit="Text" value=""/>
<WorkPieceMarkerPosition unit="Position" value="0 0 0 0 0 1 0"/>
<WorkPieceMarkerFlipped unit="Boolean" value="false"/>
</WorkPieceMarker>
<signature>7db80cd9fba9f4a7075dc0793d39201fa39bbedd8c87d1285e31c487e0ef9db2</signature>
</Workpiece>
</delem:data>
</xsl:stylesheet> i drugi 
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:delem="http://www.delem.com/delem" version="1.0">
<delem:data>
<Workpiece>
<Version unit="Text" value="1.1"/>
<WorkpieceName unit="Text" value="5_2k8_25"/>
<WorkpieceDescription unit="Text" value=""/>
<Note unit="Text" value=""/>
<WorkpieceThickness unit="MilliMeter" value="5"/>
<WorkpieceThicknessCorrection unit="MilliMeter" value="0"/>
<WriteProtected unit="Boolean" value="false"/>
<WorkpieceDimensions unit="Enumeration" value="Outside"/>
<DrawingType unit="Enumeration" value="2D"/>
<DrawingSubType unit="Enumeration" value=""/>
<CreationDate unit="DateTime" value="2025-01-31 06:43:20"/>
<ModificationDate unit="DateTime" value="2025-01-31 06:43:46"/>
<RadiusProgrammingStyle unit="Enumeration" value="UseCalculated"/>
<BendAllowanceProgrammingStyle unit="Enumeration" value="UseCalculated"/>
<VersionCreated unit="Text" value=""/>
<VersionLastEdit unit="Text" value="3.8.11"/>
<FoilStatus unit="Enumeration" value="None"/>
<BendLabelsVisible unit="Boolean" value="false"/>
<WorkpieceMaterial>
<MaterialName unit="Text" value="STAL CZARNA"/>
<MaterialNumber unit="Text" value="1"/>
<TensileStrength unit="KiloNewtonPerSquareMm" value="470"/>
<EModulus unit="KiloNewtonPerSquareMm" value="210000"/>
<StrainHardeningExponent unit="RealNumber" value="0.23"/>
</WorkpieceMaterial>
<WorkpieceMap>
<MainPlaneName unit="Text" value="MainPlane"/>
<MainPlaneSideRef unit="DirectionVector" value="1 0 0"/>
<MainPlaneTransformation unit="Position" value="0 0 0 0 0 1 0"/>
<StaticComponent>
<WorkpieceComponentName unit="Text" value="MainPlane"/>
<StaticComponentPart>
<StaticComponentHull unit="Outline" value="4 0 311.005721 200 311.005721 false 200 311.005721 200 500 false 200 500 0 500 false 0 500 0 311.005721 false"/>
</StaticComponentPart>
<DeformableCompShortening>
<DeformableComponentName unit="Text" value="DC00"/>
<ShorteningContour unit="Outline" value="4 200 311.005721 0 311.005721 false 0 311.005721 0 300 false 0 300 200 300 false 200 300 200 311.005721 false"/>
</DeformableCompShortening>
</StaticComponent>
<StaticComponent>
<WorkpieceComponentName unit="Text" value="SC00"/>
<StaticComponentPart>
<StaticComponentHull unit="Outline" value="4 11.005721 200 11.005721 0 false 11.005721 0 250 0 false 250 0 250 200 false 250 200 11.005721 200 false"/>
</StaticComponentPart>
<DeformableCompShortening>
<DeformableComponentName unit="Text" value="DC00"/>
<ShorteningContour unit="Outline" value="4 11.005721 0 11.005721 200 false 11.005721 200 0 200 false 0 200 0 0 false 0 0 11.005721 0 false"/>
</DeformableCompShortening>
</StaticComponent>
<VDeformableComponent>
<WorkpieceComponentName unit="Text" value="DC00"/>
<VDeformableComponentBendLine unit="Lines" value="1 Line 7.422642 0 7.422642 200 false"/>
<VDeformableComponentAngle unit="Degrees" value="80"/>
<PreferredInnerRadius unit="MilliMeter" value="6.00572"/>
<ActualInnerRadius unit="MilliMeter" value="6.00572"/>
<VDeformableComponentHulls unit="Outlines" value="1 Outline 4 0 0 14.845284 0 false 14.845284 0 14.845284 200 false 14.845284 200 0 200 false 0 200 0 0 false"/>
<BendZoneCreationOrigin unit="Enumeration" value="delem_editor"/>
<LeftStaticComponent>
<StaticComponentName unit="Text" value="MainPlane"/>
<SideReference unit="Line" value="0 311.005721 200 311.005721 false"/>
</LeftStaticComponent>
<RightStaticComponent>
<StaticComponentName unit="Text" value="SC00"/>
<SideReference unit="Line" value="11.005721 200 11.005721 0 false"/>
</RightStaticComponent>
<VBendDeformation>
<DeformationName unit="Text" value="Def00DC00"/>
<AngleAfter unit="Degrees" value="80"/>
<AngleBefore unit="Degrees" value="180"/>
<BendAllowance unit="MilliMeter" value="0"/>
</VBendDeformation>
</VDeformableComponent>
</WorkpieceMap>
<WorkPieceMarker>
<StaticComponentName unit="Text" value=""/>
<WorkPieceMarkerPosition unit="Position" value="0 0 0 0 0 1 0"/>
<WorkPieceMarkerFlipped unit="Boolean" value="false"/>
</WorkPieceMarker>
<signature>30a800776a572b4f72054a6122eba9c214bc53bb80f639c389d8e21ac56dedaa</signature>
</Workpiece>
</delem:data>
</xsl:stylesheet>

Popraw skrypt aby wyliczenia wynikow out i  in były następujące:

dla długości x(out) czyli po zewnętrznej
długość x(out) =  x(zewn.) + out
out = offset * (tangens(180 - kąt))/2

czyli np.
a(out) =  a(zewn.) + offset * tangens((180 - kąt))/2)

analogicznie dla b(out), c(out) jeżeli występują



dla długości x(in) czyli po  wewnętrznej:

długość x(in) = x(zewn) + in
in = długość łuku po neutralnej podzielić na 2
długość łuku po neutralnej to łuk o promieniu r wewn + 1/2grubość blachy


Oto twoje wyniki:
=== Wyniki dla pliku: prd.4_100k9050.dld ===
=== Odczyt z pliku DLD (metoda bounding box) ===
WorkpieceDimensions = Outside
Grubość             = 4.0 mm
Promień wewn.       = 5.6326 mm
-------------------------------------------
[MainPlane] => a=90.367398
[SC00] => b=40.367398
[DC00] => łuk=11.989263
-------------------------------------------
Offset (r+g)        = 9.632600 mm
-------------------------------------------
a (zewn.) = 90.367398 mm
b (zewn.) = 40.367398 mm
Rozwinięcie (a + b + c + ... + łuki) = 142.724059 mm

-------------------------------------------
a (out) = 98
b (out) = 48

-----

a (in) = 90.0
b (in) = 40.0

-----
kąty
90


=== Wyniki dla pliku: prd.5_2k8_25.dld ===
=== Odczyt z pliku DLD (metoda bounding box) ===
WorkpieceDimensions = Outside
Grubość             = 5.0 mm
Promień wewn.       = 6.00572 mm
-------------------------------------------
[MainPlane] => a=188.994279
[SC00] => b=200.000000
[DC00] => łuk=14.845284
-------------------------------------------
Offset (r+g)        = 11.005720 mm
-------------------------------------------
a (zewn.) = 188.994279 mm
b (zewn.) = 200.000000 mm
Rozwinięcie (a + b + c + ... + łuki) = 403.839563 mm

-------------------------------------------
a (out) = 199
b (out) = 210

-----

a (in) = 189.0
b (in) = 200.0

-----
kąty
80

Powinny wyglądać tak:

=== Wyniki dla pliku: prd.4_100k9050.dld ===
=== Odczyt z pliku DLD (metoda bounding box) ===
WorkpieceDimensions = Outside
Grubość             = 4.0 mm
Promień wewn.       = 5.6326 mm
-------------------------------------------
[MainPlane] => a=90.367398
[SC00] => b=40.367398
[DC00] => łuk=11.989263
-------------------------------------------
Offset (r+g)        = 9.632600 mm
-------------------------------------------
a (zewn.) = 90.367398 mm
b (zewn.) = 40.367398 mm
Rozwinięcie (a + b + c + ... + łuki) = 142.724059 mm

-------------------------------------------
a (out) = 100
b (out) = 50

-----

a (in) = 96
b (in) = 46

-----
kąty
90


=== Wyniki dla pliku: prd.5_2k8_25.dld ===
=== Odczyt z pliku DLD (metoda bounding box) ===
WorkpieceDimensions = Outside
Grubość             = 5.0 mm
Promień wewn.       = 6.00572 mm
-------------------------------------------
[MainPlane] => a=188.994279
[SC00] => b=200.000000
[DC00] => łuk=14.845284
-------------------------------------------
Offset (r+g)        = 11.005720 mm
-------------------------------------------
a (zewn.) = 188.994279 mm
b (zewn.) = 200.000000 mm
Rozwinięcie (a + b + c + ... + łuki) = 403.839563 mm

-------------------------------------------
a (out) = 200
b (out) = 250

-----

a (in) = 195
b (in) = 245

-----
kąty
80
